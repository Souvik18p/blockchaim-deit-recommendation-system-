# -*- coding: utf-8 -*-
"""Major Project Final(working ).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IF50C0_K5a-1PIj1N7sfsulw8n6crSzq
"""

import hashlib
import time
import random
import string
from pymongo import MongoClient

class Block:
    def __init__(self, index, previous_hash, timestamp, data, nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        """Create a SHA-256 hash based on the block's contents."""
        block_string = f"{self.index}{self.previous_hash}{self.timestamp}{self.data}{self.nonce}"
        return hashlib.sha256(block_string.encode()).hexdigest()

    def mine_block(self, difficulty):
        """Proof-of-work algorithm requiring a hash starting with a certain number of zeros."""
        while self.hash[:difficulty] != "0" * difficulty:
            self.nonce += 1
            self.hash = self.calculate_hash()
        print(f"Block mined: {self.hash}")

class Blockchain:
    def __init__(self, difficulty=4):
        self.chain = [self.create_genesis_block()]
        self.difficulty = difficulty

    def create_genesis_block(self):
        """Create the first block of the blockchain."""
        return Block(0, "0", time.time(), "Genesis Block")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, data):
        """Add a new block to the blockchain with the provided data."""
        latest_block = self.get_latest_block()
        new_block = Block(len(self.chain), latest_block.hash, time.time(), data)
        new_block.mine_block(self.difficulty)
        self.chain.append(new_block)

    def save_block_to_db(self, block, collection):
        """Save a block to the MongoDB database."""
        block_data = {
            "index": block.index,
            "previous_hash": block.previous_hash,
            "timestamp": block.timestamp,
            "data": block.data,
            "nonce": block.nonce,
            "hash": block.hash
        }
        collection.insert_one(block_data)
        print(f"Block {block.index} saved to MongoDB.")

    def get_block_from_db(self, patient_id, collection):
        """Retrieve a block by Patient ID from MongoDB."""
        return collection.find_one({"data.Patient ID": patient_id})

    def is_chain_valid(self):
        """Verify the validity of the blockchain."""
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]
            if current_block.hash != current_block.calculate_hash():
                print(f"Block {i} has been tampered with.")
                return False
            if current_block.previous_hash != previous_block.hash:
                print(f"Block {i} previous hash does not match.")
                return False
        return True

def generate_patient_id():
    """Generate a short unique patient ID with letters and numbers."""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

def get_medical_data(patient_id=None):
    """Prompt the user for medical data input and return it as a dictionary."""
    hospital = input("Enter hospital name: ")
    doctor = input("Enter doctor's name: ")
    patient_name = input("Enter patient's name: ")
    age = int(input("Enter patient's age: "))
    weight = float(input("Enter patient's weight (kg): "))
    height = float(input("Enter patient's height (cm): "))
    issues = input("Enter patient's health issues: ")
    suggestions = input("Enter doctor's suggestions: ")

    if patient_id is None:
        patient_id = generate_patient_id()
        print(f"New Patient ID generated: {patient_id}")

    return {
        "Patient ID": patient_id,
        "Hospital": hospital,
        "Doctor": doctor,
        "Patient Name": patient_name,
        "Age": age,
        "Weight": weight,
        "Height": height,
        "Issues": issues,
        "Suggestions": suggestions
    }

def get_mongo_client():
    """Connect to MongoDB Atlas."""
    db_uri = "mongodb+srv://souvikpramanick018:a0oUaw6JFpT3iNXn@cluster0.98trv.mongodb.net/blockchain?retryWrites=true&w=majority"
    client = MongoClient(db_uri)
    db = client["blockchain"]
    collection = db["Blocks"]
    return collection

def display_blockchain(blockchain):
    """Display the current state of the blockchain."""
    print("\nCurrent Blockchain State:")
    for block in blockchain.chain:
        print(f"Block {block.index}:")
        print(f"  Hash: {block.hash}")
        print(f"  Previous Hash: {block.previous_hash}")
        print(f"  Data: {block.data}")
        print(f"  Timestamp: {block.timestamp}")
        print(f"  Nonce: {block.nonce}")
        print("-" * 40)

# Main Program
collection = get_mongo_client()
my_blockchain = Blockchain()

while True:
    print("\nChoose an option:")
    print("1. Create a new Patient ID and add data")
    print("2. Use an existing Patient ID to retrieve data")
    choice = input("Enter 1 or 2: ")

    if choice == "1":
        medical_data = get_medical_data()
        my_blockchain.add_block(medical_data)
        my_blockchain.save_block_to_db(my_blockchain.get_latest_block(), collection)
    elif choice == "2":
        patient_id = input("Enter existing Patient ID: ")
        block = my_blockchain.get_block_from_db(patient_id, collection)
        if block:
            print(f"\nBlock Details for Patient ID {patient_id}:")
            print(f"Index: {block['index']}")
            print(f"Hash: {block['hash']}")
            print(f"Previous Hash: {block['previous_hash']}")
            print(f"Data: {block['data']}")
            print(f"Timestamp: {block['timestamp']}")
            print(f"Nonce: {block['nonce']}\n")
            new_block_choice = input("Do you want to create a new block for this patient? (y/n): ").lower()
            if new_block_choice == 'y':
                medical_data = get_medical_data(patient_id)
                my_blockchain.add_block(medical_data)
                my_blockchain.save_block_to_db(my_blockchain.get_latest_block(), collection)
        else:
            print("Patient ID not found in blockchain.")
    else:
        print("Invalid choice. Please enter 1 or 2.")

    cont = input("Do you want to continue? (y/n): ").lower()
    if cont != 'y':
        break

print("Is blockchain valid?", my_blockchain.is_chain_valid())

from pymongo import MongoClient

def test_connection():
    db_uri = "mongodb+srv://souvikpramanick018:a0oUaw6JFpT3iNXn@cluster0.98trv.mongodb.net/MedicalBlockchain?retryWrites=true&w=majority"
    try:
        client = MongoClient(db_uri, serverSelectionTimeoutMS=5000)  # 5-second timeout
        print("Databases:", client.list_database_names())
    except Exception as e:
        print("Connection error:", e)

test_connection()

!pip install pymongo

